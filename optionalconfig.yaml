substitutions:
    devicename: exampled1mini
    friendly_name: "Example D1 mini"

esphome:
    name: exampled1mini # The name of the device
  
  esp8266: # The platform type
    board: d1_mini # The type of ESP board
    
  # Enabling the logging component
  logger:
  
  # Enable Home Assistant API
  api:
    encryption:
      key: "i51USvDruBRuPndxTYuQ41ijowUdoQVXOKYwPUQITAw=" # This is the HA encryption key HA asks for during the device discovery
      
  # The OTA flashing password
  ota:
    password: !secret ota_password
  
  wifi: # Your Wifi network details
    ssid: !secret wifi_ssid
    password: !secret wifi_password
    
  # Enable fallback hotspot in case wifi connection fails  
    ap:
      ssid: "exampled1mini Fallback Hotspot" # The name of the AP the device will make
      password: !secret ap_password # The AP password
  captive_portal:

# Optional extras

# Warning the webserver can take up a lot of resources so only enable it when you have everything else working and see if your board can handle the increased overhead
web_server: # Creates a simple web server on the device that can be accessed through any browser, you can visit the website it creates by typing in the device IP in a browser
  port: 80
  
switch:   

  - platform: restart # Adds a restart button as an entity in Home Assistant and the webserver to restart the device
    name: ${friendly_name} Restart  
     
sensor:
  - platform: uptime # Adds an uptime sensor and makes the result into a human readable value
    name: ${friendly_name} Uptime
    id: uptime_sensor
    update_interval: 60s
    on_raw_value:
      then:
        - text_sensor.template.publish:
            id: uptime_secs
            state: !lambda |-
              int seconds = round(id(uptime_sensor).raw_state);
              int days = seconds / (24 * 3600);
              seconds = seconds % (24 * 3600);
              int hours = seconds / 3600;
              seconds = seconds % 3600;
              int minutes = seconds /  60;
              seconds = seconds % 60;
              return (
                (days ? to_string(days) + "d " : "") +
                (hours ? to_string(hours) + "h " : "") +
                (minutes ? to_string(minutes) + "m " : "") +
                (to_string(seconds) + "s")
              ).c_str();   
              
text_sensor:
  - platform: version # Makes a sensor that displays the currently loaded ESPHome version
    name: ${friendly_name} Version

  - platform: template # Uptime sensor is seconds
    name: ${friendly_name} Uptime in seconds
    id: uptime_secs
    icon: mdi:clock-start    

    